# Set of convenient tools to convert a table of parameters into the right type and
# the default parameter

#=============================================
Example use:
t = empty_parameter_table()    # initialize table of parameters
add_parameter!(t, :umax, 1e-3u"mmol/m^3/d",
    optimizable = true,
    description = "Maximum uptake rate (Michaelis-Menten)",
    LaTeX = "U_\\mathrm{max}")
add_parameter!(t, :ku, 1e-1u"mmol/m^3",
    optimizable = true,
    description = "Half-saturation constant (Michaelis-Menten)",
    LaTeX = "k_\\vec{u}")
add_parameter!(t, :w‚ÇÄ, 1u"m/d",
    optimizable = true,
    description = "Sinking velocity at surface",
    LaTeX = "w_0")
add_parameter!(t, :w‚Ä≤, 1u"d^-1",
    optimizable = true,
    description = "Vertical gradient of sinking velocity",
    LaTeX = "w'")
add_parameter!(t, :Œ∫, 0.25u"d^-1",
    optimizable = true,
    description = "Remineralization rate constant",
    LaTeX = "\\kappa")
add_parameter!(t, :DINgeo, 2.3u"mmol/m^3",
    optimizable = true,
    description = "Mean DIN concentration",
    LaTeX = "\\xNUT^\\obs")
add_parameter!(t, :œÑg, 1u"Myr",
    description = "Geological restoring timescale",
    LaTeX = "\\tau_\\mathrm{geo}")
add_parameter!(t, :œâ, 1e-4u"1",
    description = "Relative weight of cost of parameters (Hyper parameter)",
    LaTeX = "\\omega")
initialize_parameter_type(t)   # Generate the parameter type
=============================================#

function empty_parameter_table()
    return DataFrame(
        symbol = Symbol[],
        value = Float64[],
        unit = Unitful.Units[],
        printunit = Unitful.Units[],
        mean_obs = Float64[],
        variance_obs = Float64[],
        optimizable = Bool[],
        description = String[],
        LaTeX = String[]
    )
end
export empty_parameter_table

"""
    new_parameter(symbol::Symbol,
                  quantity;
                  mean_obs=ustrip(upreferred(quantity)),
                  variance_obs=ustrip(upreferred(quantity))^2,
                  optimizable=false,
                  description="",
                  LaTeX="")

Creats a parameter (to be added to the parameters table).
If keyword argument `optimizable = false`, then observation mean and
variance are set to `NaN`.
Otherwise, these are set to keyword arguments `mean_obs` (and `variance_obs`)
if supplied, or to `quantity` (and its square), after converting it to
the preferred unit and stripping it of said unit if not.
Example: TODO
"""
new_parameter(symbol::Symbol,
              quantity;
              mean_obs=ustrip(upreferred(quantity)),
              variance_obs=ustrip(upreferred(quantity))^2,
              optimizable=false,
              description="",
              LaTeX="") = [symbol,
                           ustrip(upreferred(quantity)),
                           unit(upreferred(quantity)),
                           unit(quantity),
                           optimizable ? mean_obs : NaN,
                           optimizable ? variance_obs : NaN,
                           optimizable,
                           description,
                           LaTeX]
export new_parameter

"""
    add_parameter!(t::DataFrame, args...; kwargs...)

Adds a parameter to the parameters table `t`.
If keyword argument `optimizable = false`, then observation mean and
variance are set to `NaN`.
Otherwise, these are set to keyword arguments `mean_obs` (and `variance_obs`)
if supplied, or to `quantity` (and its square), after converting it to
the preferred unit and stripping it of said unit if not.
Example: TODO
Note for future edit of the docs: Don't repeat yourself between add and new param functions
"""
function add_parameter!(t::DataFrame, args...; kwargs...)
    if any(t[:symbol] .== args[1])
        error("Parameter $(args[1]) already exists! (Maybe delete it first?)")
    else
        push!(t, new_parameter(args...; kwargs...))
    end
end
export add_parameter!

delete_parameter!(t::DataFrame, i) = deleterows!(t, i)
function delete_parameter!(t::DataFrame, s::Symbol)
    i = findfirst(t[:symbol] .== s)
    if isnothing(i)
        println("Parameter $s did not exist. No deletions")
        return t
    else
        deleterows!(t, i)
    end
end
export delete_parameter!

#====
Generate Parameters
====#

import Flatten: flattenable

macro make_struct(struct_name, schema...)
    fields = [:($(x[1])::U | $(x[2])) for x in schema...]
    esc(quote @flattenable mutable struct $struct_name{U} <: AbstractVector{U}
        $(fields...)
        end
    end)
end


function initialize_Parameters_type(t)
    symbols = t[:symbol]
    optimizables = t[:optimizable]
    optsymbols = symbols[optimizables]
    schema = [(Symbol(x),Symbol(y)) for (x,y) in zip(symbols, optimizables)]
    eval( :(@make_struct $(:Parameters) $schema))

    printunits = t[:printunit]
    baseunits = t[:unit]
    values = t[:value]

    Œºs = [Œº for (Œº, opt) in zip(t[:mean_obs], optimizables) if opt]
    œÉ¬≤s = [œÉ¬≤ for (œÉ¬≤, opt) in zip(t[:variance_obs], optimizables) if opt]

    @eval begin
        # Printing functionality
        function Base.show(io::IO, p::Parameters)
            println(typeof(p))
            for (s, pu, bu, opt) in zip($symbols, $printunits, $baseunits, $optimizables)
                v = getfield(p, s)
                if pu == 1
                    val, ppu = v, ""
                else
                    val, ppu = ustrip(uconvert(pu, v * bu)), unicodify(pu)
                end
                optstr = opt ? "" : "(fixed)"
                print_type(io, s, val, ppu, optstr)
            end
        end
        Base.show(io::IO, ::MIME"text/plain", p::Parameters) = Base.show(io, p)
        # constants
        const p‚ÇÄ = Parameters($values...)
        const m = length(fieldnameflatten(p‚ÇÄ))
        const m_all = length(fieldnames(typeof(p‚ÇÄ)))
        const mean_pobs = $Œºs
        const variance_pobs = $œÉ¬≤s
        export p‚ÇÄ, m, mean_pobs, variance_pobs, m_all
        # overloads
        Base.length(p::Parameters) = length(fieldnameflatten(p))
        Base.size(p::Parameters) = (length(p),) # ForwardDiff requirement
        # Make Parameters an iterable for the parameters to be able to `collect` it into a vector
        Base.iterate(p::Parameters, i=1) = i > m_all ? nothing : (getfield(p, i), i + 1)
        # Convert p to a vector and vice versa
        Base.vec(p::Parameters) = collect((p...,))
        Base.copy(p::Parameters) = Parameters(vec(p)...)
        Base.convert(::Type{Parameters{T1}}, p::Parameters{T2}) where {T1, T2} = Parameters(convert(Vector{T1}, vec(p))...)
        Base.convert(::Type{Parameters{T}}, p::Parameters{T}) where T = p
        opt_para(p, v) = Flatten.reconstruct(p, v)
        function opt_para(p::Parameters{T‚Çö}, v::Vector{T·µ•}) where {T‚Çö, T·µ•}
            Flatten.reconstruct(convert(Parameters{T·µ•}, p), v)
        end
        opt_para(v) = opt_para(p‚ÇÄ, v)
        optvec(p::Parameters) = flatten(Vector, p)
        optvec(v) = v # ForwardDiff requirement
        export optvec
        # Testing equality and approx
        Base.:‚âà(p‚ÇÅ::Parameters, p‚ÇÇ::Parameters) = vec(p‚ÇÅ) ‚âà vec(p‚ÇÇ)
        Base.:(==)(p‚ÇÅ::Parameters, p‚ÇÇ::Parameters) = vec(p‚ÇÅ) == vec(p‚ÇÇ)
        # Overloads for being a subtype of Vector
        strerror = "Index of of bounds!"
        Base.getindex(p::Parameters, i::Int) = i < 1 || i > m ? error(strerror) : getfield(p, $optsymbols[i])
        Base.setindex!(p::Parameters, v, i::Int) = i < 1 || i > m ? error(strerror) : setfield!(p, $optsymbols[i], v)
        # base overloads
        Base.:+(p::Parameters, v::Vector) = opt_para(p‚ÇÄ, optvec(p) + v)
        Base.:-(p::Parameters, v::Vector) = opt_para(p‚ÇÄ, optvec(p) - v)
        Base.:+(p‚ÇÅ::Parameters, p‚ÇÇ::Parameters) = opt_para(p‚ÇÄ, optvec(p‚ÇÅ) + optvec(p‚ÇÇ))
        Base.:-(p‚ÇÅ::Parameters, p‚ÇÇ::Parameters) = opt_para(p‚ÇÄ, optvec(p‚ÇÅ) - optvec(p‚ÇÇ))
        Base.:*(s::Number, p::Parameters) = opt_para(p‚ÇÄ, s * optvec(p))
        Base.:*(p::Parameters, s::Number) = s * p
    end
end
export initialize_Parameters_type


#=======
Printing
=======#

print_type(io, f, val::Float64, ppu, s) = @printf io "%6s = %8.2e [%s] %s\n" f val ppu s
print_type(io, f, val::Dual{Float64}, ppu, s) = @printf io "%6s = %8.2e + %8.2eŒµ [%s] %s\n" f ‚Ñú(val) ùîá(val) ppu s
print_type(io, f, val::Complex{Float64}, ppu, s) = @printf io "%6s = %8.2e + %8.2ei [%s] %s\n" f ‚Ñú(val) ‚Ñë(val) ppu s
print_type(io, f, val::Hyper{Float64}, ppu, s) = @printf io "%6s = %8.2e + %8.2eŒµ‚ÇÅ + %8.2eŒµ‚ÇÇ + %8.2eŒµ‚ÇÅŒµ‚ÇÇ [%s] %s\n" f ‚Ñú(val) ‚Ñå‚ÇÅ(val) ‚Ñå‚ÇÇ(val) ‚Ñå(val) ppu s
‚Ñú(x::Complex) = real(x)
‚Ñë(x::Complex) = imag(x)
‚Ñú(x::Dual) = DualNumbers.realpart(x)
ùîá(x::Dual) = DualNumbers.dualpart(x)
‚Ñú(x::Hyper) = HyperDualNumbers.realpart(x)
‚Ñå(x::Hyper) = HyperDualNumbers.Œµ‚ÇÅŒµ‚ÇÇpart(x)
‚Ñå‚ÇÅ(x::Hyper) = HyperDualNumbers.Œµ‚ÇÅpart(x)
‚Ñå‚ÇÇ(x::Hyper) = HyperDualNumbers.Œµ‚ÇÇpart(x)

function unicodify(U::Unitful.Units)
    str = string(U)
    str = replace(str, r"\^-1" => s"‚Åª¬π")
    str = replace(str, r"\^-2" => s"‚Åª¬≤")
    str = replace(str, r"\^-3" => s"‚Åª¬≥")
    str = replace(str, r"\^1" => s"¬π")
    str = replace(str, r"\^2" => s"¬≤")
    str = replace(str, r"\^3" => s"¬≥")
    return str
end


